<div dir="ltr">Hey all,<div><br></div><div>I&#39;ve written up another update on Ushahidi 3.0, focusing on current progress building the API : <a href="http://gh.robbiemackay.com/2013/04/11/api-wrangling/">http://gh.robbiemackay.com/2013/04/11/api-wrangling/</a></div>

<div style><br></div><div><div style>I&#39;m reposting my thoughts on API authentication here as I&#39;d love more input on this:</div></div><blockquote style="margin:0px 0px 0px 40px;border:none;padding:0px"><div style>
<div style>
<p style="color:rgb(51,51,51);font-family:Georgia,&#39;Times New Roman&#39;,&#39;Bitstream Charter&#39;,Times,serif;font-size:13px;line-height:19px">This is probably the next major decision. How do we handle API authentication? do we use OAuth? 1.0 or 2.0? Where do we handle actual user login/registration?… the entire app is going to be built on the API.</p>

</div></div><div style><div style><p style="color:rgb(51,51,51);font-family:Georgia,&#39;Times New Roman&#39;,&#39;Bitstream Charter&#39;,Times,serif;font-size:13px;line-height:19px">At the moment I’m leaning towards OAuth 2.0, primarily because its what <a href="https://wiki.ushahidi.com/display/WIKI/SwiftRiver+API+Authentication">Swiftriver uses</a>, and consistency between products is important. However OAuth 2.0 has some issues:</p>

</div></div></blockquote><div style><div style><ul style="color:rgb(51,51,51);font-family:Georgia,&#39;Times New Roman&#39;,&#39;Bitstream Charter&#39;,Times,serif;font-size:13px;line-height:19px"><ul style><li style>the editor for the spec <a href="http://hueniverse.com/2012/07/oauth-2-0-and-the-road-to-hell/">withdrew</a> <a href="http://hueniverse.com/2012/07/on-leaving-oauth/">saying</a> OAuth 2 had failed</li>

<li style>there are a few ways to <a href="http://www.theregister.co.uk/2011/02/02/facebook_plugs_authentication_flaw/">mess</a> <a href="http://stephensclafani.com/2011/04/06/oauth-2-0-csrf-vulnerability/">up</a> <a href="http://www.thread-safe.com/2012/02/more-on-oauth-implicit-flow-application.html">an</a> <a href="http://homakov.blogspot.co.nz/2012/07/saferweb-most-common-oauth2.html">implementation</a> security wise</li>

<li style>and one implementation isn’t guaranteed to be interoperable with another</li></ul></ul></div></div><blockquote style="margin:0px 0px 0px 40px;border:none;padding:0px"><div style><div style><p style="color:rgb(51,51,51);font-family:Georgia,&#39;Times New Roman&#39;,&#39;Bitstream Charter&#39;,Times,serif;font-size:13px;line-height:19px">

That said the many <em>almost-oauth</em> APIs out there probably have more, and similar problems: rolling our own is not an option.</p></div></div><div style><div style><p style="color:rgb(51,51,51);font-family:Georgia,&#39;Times New Roman&#39;,&#39;Bitstream Charter&#39;,Times,serif;font-size:13px;line-height:19px">

OAuth 2 is probably still going to get a lot of use, and there are <a href="https://blog.apigee.com/taglist/oauth">good resources</a> appearing on how to do it right, and a couple of good <a href="https://github.com/andreassolberg/jso">oauth2</a> <a href="https://github.com/adoy/PHP-OAuth2">clients</a>.</p>

</div></div><div style><div style><p style="color:rgb(51,51,51);font-family:Georgia,&#39;Times New Roman&#39;,&#39;Bitstream Charter&#39;,Times,serif;font-size:13px;line-height:19px">One <a href="https://blog.apigee.com/detail/oauth_is_it_worth_the_effort/">recommendation</a> that stuck out was “If your API can require HTTPS, use OAuth 2.0 with bearer tokens. Otherwise, use OAuth 1.0a”. I need to dig into the details of this, but given deployers won’t always use SSL this is worth considering.</p>

</div></div></blockquote><div><div style>What do you think? preferences for one authentication method or another?</div><div><br></div>-- <br><div>Robbie Mackay</div><div><br><div>Software Developer, External Projects</div>

<div>Ushahidi Inc</div><div><div>e: <a href="mailto:robbie@..." target="_blank">robbie@...</a></div></div><div>skype: robbie.mackay</div></div>
</div></div>
